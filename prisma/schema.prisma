// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   // Display name, can be from Discord or custom
  username      String?   @unique // Added: Unique username for non-Discord login
  email         String?   @unique
  emailVerified DateTime?
  hashedPassword String?   // Added: Store hashed password
  image         String?
  coins         Int       @default(1000)
  accounts      Account[] // For OAuth providers like Discord
  sessions      Session[]
  gamePlayers   GamePlayer[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Game {
  id        String   @id @default(cuid())
  status    GameStatus @default(WAITING)
  players   GamePlayer[]
  rounds    GameRound[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GamePlayer {
  id        String   @id @default(cuid())
  gameId    String
  userId    String
  position  Int      // 0-3 for the four positions
  score     Int      @default(0)
  bid       Int?
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameId, position])
}

model GameRound {
  id          String   @id @default(cuid())
  gameId      String
  roundNumber Int
  tricksTaken Int      @default(0)
  score       Int      @default(0)
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([gameId, roundNumber])
}

enum GameStatus {
  WAITING
  BIDDING
  PLAYING
  FINISHED
}
