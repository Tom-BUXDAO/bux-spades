generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  coins          Int          @default(1000)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  hashedPassword String?
  username       String?      @unique
  accounts       Account[]
  gamePlayers    GamePlayer[]
  sessions       Session[]
}

model Game {
  id        String       @id @default(cuid())
  status    GameStatus   @default(WAITING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  players   GamePlayer[]
  rounds    GameRound[]
}

model GamePlayer {
  id        String   @id @default(cuid())
  gameId    String
  userId    String
  position  Int
  score     Int      @default(0)
  bid       Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gameId, position])
}

model GameRound {
  id          String   @id @default(cuid())
  gameId      String
  roundNumber Int
  tricksTaken Int      @default(0)
  score       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([gameId, roundNumber])
}

enum GameStatus {
  WAITING
  BIDDING
  PLAYING
  FINISHED
}
